#!/usr/bin/python3
import gettext
import gi
import os
import subprocess
import sys

gi.require_version('Gtk', '3.0')
gi.require_version('XApp', '1.0')
from gi.repository import Gtk, XApp

# i18n
gettext.install("nvidia-prime-applet", "/usr/share/locale")

NVIDIA_MODE = _("NVIDIA (Performance Mode)")
ON_DEMAND_MODE = _("NVIDIA On-Demand")
INTEL_MODE = _("Intel (Power Saving Mode)")

def get_output(commands):
    process = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    out, err = process.communicate()
    return out.decode('utf-8').strip()

class Tray:
    def __init__(self):

        self.icon = XApp.StatusIcon()
        self.icon.set_name("nvidia-prime")

        # Find GPU name
        renderer = None
        try:
            renderer = subprocess.check_output("glxinfo | grep -i 'OpenGL renderer'", shell=True).decode("UTF-8").strip().split(": ")[1]
        except:
            pass

        # Find active mode
        nvidia = Gtk.MenuItem(label=_("Switch to: %s") % NVIDIA_MODE)
        nvidia.connect("activate", self.switch, 'nvidia', NVIDIA_MODE)
        ondemand = Gtk.MenuItem(label=_("Switch to: %s") % ON_DEMAND_MODE)
        ondemand.connect("activate", self.switch, 'on-demand', ON_DEMAND_MODE)
        intel = Gtk.MenuItem(label=_("Switch to: %s") % INTEL_MODE)
        intel.connect("activate", self.switch, 'intel', INTEL_MODE)
        active_gpu = get_output(["prime-select", "query"])
        if (active_gpu == "nvidia"):
            self.icon.set_icon_name("prime-tray-nvidia-symbolic")
            mode = NVIDIA_MODE
            nvidia.set_sensitive(False)
        elif (active_gpu == "on-demand"):
            self.icon.set_icon_name("prime-tray-intel-symbolic")
            mode = ON_DEMAND_MODE
            ondemand.set_sensitive(False)
        elif (active_gpu == "intel"):
            self.icon.set_icon_name("prime-tray-intel-symbolic")
            mode = INTEL_MODE
            intel.set_sensitive(False)
        else:
            self.icon.set_icon_name("dialog-error-symbolic")
            mode = _("Unknown mode")

        menu = Gtk.Menu()
        
        if renderer is None:
            self.icon.set_tooltip_text(mode)
        else:
            self.icon.set_tooltip_text("%s\n%s" % (renderer, mode))
            item = Gtk.MenuItem(label=renderer)
            item.set_sensitive(False)
            menu.append(item)
            menu.append(Gtk.SeparatorMenuItem())

        menu.append(intel)
        menu.append(nvidia)
        menu.append(ondemand)

        menu.append(Gtk.SeparatorMenuItem())

        item = Gtk.MenuItem(label=_("NVIDIA Settings"))
        item.connect("activate", self.run_nvidia_settings)
        menu.append(item)
        menu.append(Gtk.SeparatorMenuItem())
        
        item = Gtk.MenuItem(label=_("About"))
        item.connect("activate", self.about)
        menu.append(item)

        item = Gtk.MenuItem(label=_("Quit"))
        item.connect("activate", self.terminate)
        menu.append(item)
        menu.show_all()

        self.icon.set_primary_menu(menu)
        self.icon.set_secondary_menu(menu)

    def run_nvidia_settings (self, arg=None):
        subprocess.Popen(["nvidia-settings", "-page", "PRIME Profiles"])


    def dialog_closed(self, widget, event):
        return Gtk.ResponseType.NO

    def switch(self, widget, mode, mode_description):
        dialog = Gtk.MessageDialog(parent=None, message_type=Gtk.MessageType.INFO, buttons=Gtk.ButtonsType.YES_NO, text=_("Are you sure you want to switch to %s?") % mode_description)
        dialog.format_secondary_text(_('Changes will take effect after you log out and log back in.'))
        dialog.set_deletable(False)
        dialog.set_title("NVIDIA Optimus")
        dialog.set_icon_name("prime-tray-nvidia")
        dialog.set_skip_taskbar_hint(False)
        dialog.set_skip_pager_hint(False)
        dialog.connect("delete_event", self.dialog_closed)
        response = dialog.run()
        dialog.destroy()
        if response == Gtk.ResponseType.YES:
            subprocess.call(["pkexec", "prime-select", mode])

    def about(self, widget):
        about = Gtk.AboutDialog()
        about.set_program_name("NVIDIA Optimus")
        about.set_website("https://github.com/linuxmint/nvidia-prime-applet")
        about.set_website_label("https://github.com/linuxmint/nvidia-prime-applet")
        about.set_license_type(Gtk.License.GPL_3_0)
        about.set_logo_icon_name('prime-tray-nvidia')

        about.run()
        about.destroy()

    def terminate(self, window = None, data = None):
        Gtk.main_quit()

if __name__ == "__main__":

    # If nvidia-prime isn't installed or isn't supported, exit cleanly
    if not (os.path.exists("/usr/bin/nvidia-settings") and os.path.exists("/usr/bin/prime-select")):
        sys.exit(0)

    output = get_output(["prime-supported"])
    if output != "yes":
        sys.exit(0)

    Tray()
    Gtk.main()
